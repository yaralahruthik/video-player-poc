WEBVTT

00:00:00.367 --> 00:00:01.334
Welcome back.

00:00:01.334 --> 00:00:04.037
This is the
most interesting section of this course,

00:00:04.037 --> 00:00:07.507
and I plan to cover test driven
development and refactoring in this video.

00:00:08.008 --> 00:00:09.709
What is test driven development?

00:00:09.709 --> 00:00:11.244
The internet has many definitions.

00:00:11.244 --> 00:00:14.247
Basically, your test will drive
the development of a feature.

00:00:14.681 --> 00:00:16.116
Why do we do it?

00:00:16.116 --> 00:00:19.119
Again, go through my course notes
and a couple of blocks to get the idea.

00:00:19.119 --> 00:00:20.820
You'll also see why we do it in a moment.

00:00:20.820 --> 00:00:22.288
But in my opinion,

00:00:22.288 --> 00:00:24.090
the biggest advantage of test
driven development

00:00:24.090 --> 00:00:26.926
is that you would have tests to begin
with.

00:00:26.926 --> 00:00:29.496
You can always write tests
after you code out the feature

00:00:29.496 --> 00:00:32.699
to log the requirements,
but we never find time for that, do we?

00:00:33.466 --> 00:00:37.370
Now I am no testing expert, nor do
I always use test driven development.

00:00:37.771 --> 00:00:41.341
I use it maybe 10 to 15% of the time
when I know my requirements

00:00:41.341 --> 00:00:42.675
are pretty straightforward,

00:00:42.675 --> 00:00:46.112
or when I discover bugs
that could creeping again in the future.

00:00:46.880 --> 00:00:49.949
With time in practice, you'll also learn
when to use and when not to use it.

00:00:50.050 --> 00:00:51.151
I'm still learning,

00:00:51.151 --> 00:00:52.952
but do not let someone on the internet
tell you that

00:00:52.952 --> 00:00:54.821
this is something you should always do.

00:00:54.821 --> 00:00:56.589
Find the right trade off.

00:00:56.589 --> 00:00:59.492
I would also suggest doing test
driven development as part of a pair

00:00:59.492 --> 00:01:00.560
coding session.

00:01:00.560 --> 00:01:03.096
This way one code's the actual feature,
while others figures

00:01:03.096 --> 00:01:06.099
out the test, saving quite a bit of time.

00:01:06.099 --> 00:01:07.067
Either way, let us

00:01:07.067 --> 00:01:11.237
look at how we can use testing document
in our simple Todo application. Now,

00:01:11.538 --> 00:01:15.842
if we open our application, we can see
a couple of things that we can fix.

00:01:16.843 --> 00:01:18.044
First up, when we type

00:01:18.044 --> 00:01:21.047
into the input field
and click on the add button,

00:01:21.848 --> 00:01:23.583
the input field doesn't clear.

00:01:23.583 --> 00:01:29.089
Next thing if I click on add button,
an empty task is being added to our list.

00:01:29.122 --> 00:01:32.325
Next up is if I try to press enter,

00:01:33.093 --> 00:01:35.361
I'm not able to add a task to my list.

00:01:35.361 --> 00:01:37.263
Ideally that's a good to have feature.

00:01:37.263 --> 00:01:41.000
So let's try to let us fix these issues
by following a test

00:01:41.000 --> 00:01:41.968
driven development approach.

00:01:41.968 --> 00:01:42.802
Since the requirements

00:01:42.802 --> 00:01:45.839
are pretty straightforward, it's easy
to convert them into tests.

00:01:45.872 --> 00:01:49.175
First, let us first
try to write down our test descriptions

00:01:49.742 --> 00:01:52.745
like maybe our names like test names.

00:01:54.414 --> 00:01:55.882
So I'm going to do something
called test dot.

00:01:55.882 --> 00:01:59.719
To do this indicates that this is a test
to be completed in the future.

00:01:59.719 --> 00:02:02.188
Like it's a loop
right? So first test is to

00:02:03.356 --> 00:02:06.359
clear the input field.

00:02:07.794 --> 00:02:10.797
After adding a task.

00:02:12.765 --> 00:02:15.768
Next up was.

00:02:16.436 --> 00:02:19.439
Our app should not add an empty task.

00:02:20.607 --> 00:02:23.610
Should not add an empty task.

00:02:27.380 --> 00:02:30.250
And the third test requirement was

00:02:30.250 --> 00:02:33.253
it should add a task

00:02:33.753 --> 00:02:36.723
by pressing the enter key.

00:02:39.926 --> 00:02:40.560
Good.

00:02:40.560 --> 00:02:44.130
Now that we have our three tests, let's
see what happens if we run our test now.

00:02:44.898 --> 00:02:47.901
So let me open a new terminal
and run my tests.

00:02:49.369 --> 00:02:51.938
You would immediately see that

00:02:51.938 --> 00:02:55.175
we have our three tests that are passing.

00:02:56.976 --> 00:02:58.678
oh. Yeah. We had one in our sum.

00:02:58.678 --> 00:02:59.913
That's why we are saying three.

00:02:59.913 --> 00:03:02.015
But the actual app had two passing.

00:03:02.015 --> 00:03:03.216
Only two.

00:03:03.216 --> 00:03:06.186
And we have three pending tests,
which is our two tests.

00:03:06.186 --> 00:03:08.521
Let's implement the first test.
What should we do.

00:03:08.521 --> 00:03:10.890
The user has to type into the input field.

00:03:10.890 --> 00:03:12.692
Click on the add button.

00:03:12.692 --> 00:03:15.628
And then we have to assert
that the input field is cleared.

00:03:15.628 --> 00:03:18.698
So similar to our previous test
we would need a user

00:03:19.599 --> 00:03:21.501
which we are getting it from user event.

00:03:21.501 --> 00:03:24.070
Next we should have an isolated test.

00:03:24.070 --> 00:03:25.672
So we are going to render our app again.

00:03:26.973 --> 00:03:28.608
Since we did a clean up,

00:03:28.608 --> 00:03:31.177
we are going to clean up
all the previous instances of the app.

00:03:31.177 --> 00:03:33.513
I would still need to capture
my input button,

00:03:33.513 --> 00:03:35.582
which I'm going to just grab
from my previous tests.

00:03:35.582 --> 00:03:37.784
Again, I can pretty much use the

00:03:37.784 --> 00:03:40.787
the type and the click events
from the previous test.

00:03:40.987 --> 00:03:43.990
Next, I'm going to await and wait for

00:03:44.958 --> 00:03:46.593
the user. Click the button.

00:03:46.593 --> 00:03:49.562
I'm going to just expect my input
now to be empty.

00:03:50.663 --> 00:03:53.666
So we have something to have

00:03:53.666 --> 00:03:56.669
value and that can be empty.

00:03:58.438 --> 00:04:01.040
And since this is a user event

00:04:01.040 --> 00:04:04.043
we know we know that
the test is asynchronous.

00:04:05.044 --> 00:04:05.411
Good.

00:04:05.411 --> 00:04:08.715
Now that we have a test,
let us remove the todo and see that

00:04:08.715 --> 00:04:11.718
we have a failing test.

00:04:12.552 --> 00:04:13.086
Great.

00:04:13.086 --> 00:04:15.021
So our test is failing.

00:04:15.021 --> 00:04:17.023
That is the respective test
that is failing I believe.

00:04:18.324 --> 00:04:21.294
yes. Should clear the input field
after adding a task.

00:04:21.294 --> 00:04:22.328
Of course, this is going to fail

00:04:22.328 --> 00:04:24.931
because we do not write
the respective feature code.

00:04:24.931 --> 00:04:29.469
Now you could go ahead and write the test
for the rest of the pending test.

00:04:30.503 --> 00:04:32.639
But I prefer to do one test at a time.

00:04:32.639 --> 00:04:36.309
So let's go fetch this feature
first back in our app dot TSX.

00:04:36.576 --> 00:04:40.113
When we click on our button, right
when you click on the add task,

00:04:40.113 --> 00:04:43.283
we know that we should clear our input,
which is nothing but the task name.

00:04:44.050 --> 00:04:46.452
So all I'm going to do is set

00:04:46.452 --> 00:04:49.455
my task name back to an empty string.

00:04:50.523 --> 00:04:52.158
And I'm going to save my file.

00:04:52.158 --> 00:04:53.926
And you see that my test now passes.

00:04:53.926 --> 00:04:57.830
And we can also verify it by click on my
add the input field as clear.

00:04:59.232 --> 00:05:01.134
In a nutshell this is what test
development is.

00:05:01.134 --> 00:05:02.435
Test first.

00:05:02.435 --> 00:05:04.637
Then you code your feature out.

00:05:04.637 --> 00:05:06.272
Here our requirement was pretty simple.

00:05:06.272 --> 00:05:08.508
So it's easy to write test.

00:05:08.508 --> 00:05:11.744
In fact, you could have, not returned
a test and added this feature.

00:05:11.744 --> 00:05:13.379
But this is nice.

00:05:13.379 --> 00:05:16.015
It helps when you're refactoring,
which we'll see soon.

00:05:16.015 --> 00:05:17.750
Let us implement the second test.

00:05:17.750 --> 00:05:19.952
What should we do
when we click on the add button?

00:05:19.952 --> 00:05:23.156
When the input field is empty,
it should not add a task to our list.

00:05:23.589 --> 00:05:26.959
So we should assert that
the task is not added to the list of task

00:05:26.959 --> 00:05:32.332
when it is empty, most of the logic
would remain same and it's fine.

00:05:32.365 --> 00:05:35.368
You can delete this bit of duplication.

00:05:37.804 --> 00:05:40.273
Since we are testing for empty tasks.

00:05:40.273 --> 00:05:45.578
I want to also capture two more bugs
potential bugs, which is whitespace.

00:05:46.179 --> 00:05:50.350
So I'm going to just cover whitespace
and empty task in one particular test.

00:05:50.783 --> 00:05:52.685
You could have a different test for that
if you want to,

00:05:52.685 --> 00:05:56.356
but I'm just going to cover them at once
and we are going to still await

00:05:56.589 --> 00:06:00.259
and wait for our task for our user
events to complete.

00:06:00.560 --> 00:06:04.430
And now I expect my screen
I'm going to use the screen

00:06:04.464 --> 00:06:08.000
since I want to capture the list
item, and I'm going to query.

00:06:10.069 --> 00:06:13.072
For all viral.

00:06:14.607 --> 00:06:17.610
And what we are looking for is a list
item.

00:06:18.778 --> 00:06:21.180
Again,
there could be multiple list items here.

00:06:21.180 --> 00:06:22.982
I know
there's only one list in my application,

00:06:22.982 --> 00:06:25.651
so make sure you find the right
query for that.

00:06:25.651 --> 00:06:29.288
In case you have multiple list
items from distinct lists,

00:06:30.056 --> 00:06:33.059
and I want this to have a length of

00:06:33.393 --> 00:06:35.428
zero,

00:06:35.428 --> 00:06:36.095
right.

00:06:36.095 --> 00:06:39.098
And again this is an async test.

00:06:39.565 --> 00:06:41.834
Could.

00:06:41.834 --> 00:06:44.203
Now let us be more to do.

00:06:44.203 --> 00:06:46.406
And we should have a failing test.

00:06:46.406 --> 00:06:48.474
Yeah. Should not add an empty task.

00:06:48.474 --> 00:06:50.042
And we see that.

00:06:50.042 --> 00:06:53.012
Expected to have a length of zero
but got two.

00:06:53.479 --> 00:06:56.749
We are getting two
because we have a default list item

00:06:56.749 --> 00:06:57.850
already present in our screen.

00:06:57.850 --> 00:07:00.420
So let us also remove that.

00:07:00.420 --> 00:07:01.487
So let us remove this.

00:07:03.189 --> 00:07:06.192
Now we will see that it has one item

00:07:06.726 --> 00:07:07.226
right.

00:07:07.226 --> 00:07:09.529
So let us check how we can do this.

00:07:09.529 --> 00:07:12.698
So before we add our task
I'm going to just grab a variable.

00:07:13.466 --> 00:07:15.601
Create a variable to

00:07:15.601 --> 00:07:17.336
trim my task name.

00:07:17.336 --> 00:07:20.339
I'm going to I'm calling
it trimmed task name.

00:07:21.407 --> 00:07:24.710
And if this is not defined right

00:07:26.412 --> 00:07:29.415
I'm going to just return.

00:07:29.882 --> 00:07:31.651
And wherever I was adding my task name

00:07:31.651 --> 00:07:34.220
this is now going to be our trimmed task
name.

00:07:34.220 --> 00:07:37.223
Let us save and see
if that pass or test could.

00:07:37.457 --> 00:07:39.559
And let's also try it out manually.

00:07:39.559 --> 00:07:41.727
Perfect. I'm not able to add any task.

00:07:41.727 --> 00:07:43.329
Let's test for whitespace.

00:07:43.329 --> 00:07:44.630
Yep, even that doesn't work.

00:07:44.630 --> 00:07:46.599
I also want to add a quick call out.

00:07:46.599 --> 00:07:50.336
Sometimes people disable these add buttons
when the input field is empty.

00:07:51.571 --> 00:07:52.538
There's a lot of

00:07:52.538 --> 00:07:55.408
debate around
whether it's a good practice or not.

00:07:55.408 --> 00:07:59.011
I personally agree that it's a bad
practice to disable buttons.

00:07:59.912 --> 00:08:02.715
It's kind of out of scope of this tutorial
to discuss that,

00:08:02.715 --> 00:08:05.485
but I would suggest going through my code
and looking for this particular

00:08:05.485 --> 00:08:08.488
article from Adam Silver
to better understand why.

00:08:08.654 --> 00:08:10.289
I will also attach this
in the description,

00:08:10.289 --> 00:08:14.260
but I'm just letting you know that
disabling the buttons is not a good idea.

00:08:14.260 --> 00:08:15.962
According to me at least. Cool.

00:08:15.962 --> 00:08:19.332
Coming to our final test,
which is should not add.

00:08:19.332 --> 00:08:21.767
It should add a task
by pressing the enter key.

00:08:21.767 --> 00:08:24.003
So how could we do this?

00:08:24.003 --> 00:08:25.738
Type into the input field.

00:08:25.738 --> 00:08:29.509
Press the enter key and then assert
that the task has been added.

00:08:29.642 --> 00:08:33.513
Again, we are going to do the same setup
which is on the user

00:08:34.213 --> 00:08:37.216
user even dot setup
and render our application.

00:08:37.650 --> 00:08:39.585
And we should also be getting our input.

00:08:42.321 --> 00:08:45.625
Next up we are going to use the user dot
type method.

00:08:45.658 --> 00:08:48.661
Similarly as we did for previous inputs.

00:08:49.595 --> 00:08:52.632
But this time we're gonna use
a special characters to do this

00:08:52.832 --> 00:08:55.768
to indicate the press of enter key,

00:08:55.768 --> 00:08:58.771
which we can do with curly braces.

00:09:00.473 --> 00:09:03.442
I'm giving the space, but
maybe you could also remove that, right?

00:09:03.442 --> 00:09:06.812
And now we're going to await
and wait for a screen

00:09:08.314 --> 00:09:11.083
query all by

00:09:11.083 --> 00:09:11.684
role.

00:09:11.684 --> 00:09:14.687
And again
I'm going to just check for my list items.

00:09:15.721 --> 00:09:18.691
And this tool length

00:09:19.425 --> 00:09:21.561
of one I'm using to have length.

00:09:21.561 --> 00:09:26.065
You could also check by text like check
whether a new task has been added.

00:09:26.132 --> 00:09:28.768
Either works,
maybe that might be a better solution.

00:09:28.768 --> 00:09:31.871
But I feel like this is also good
since I know that my tests are isolated.

00:09:32.004 --> 00:09:35.374
Again, this is asynchronous
and this should fail.

00:09:35.841 --> 00:09:38.945
Oh yeah, this is todo so just remove that

00:09:39.979 --> 00:09:41.948
and this should fail.

00:09:41.948 --> 00:09:43.249
Yeah. This fails.

00:09:43.249 --> 00:09:46.252
And let's confirm
that this is the test that fails

00:09:46.552 --> 00:09:48.854
so that a task
by pressing the enter key. Yeah.

00:09:48.854 --> 00:09:51.157
But now let us go
and add this feature out.

00:09:51.157 --> 00:09:53.893
And the simplest way to do
this is actually

00:09:53.893 --> 00:09:57.363
to put our input
and the button into the form element.

00:09:57.730 --> 00:10:00.199
But I'm going to do that
in the refactoring section.

00:10:00.199 --> 00:10:03.769
So right now we are going to use the old
fashioned method of using on key down.

00:10:05.204 --> 00:10:08.207
And we are going to get a key.

00:10:08.207 --> 00:10:11.310
And if the key is enter

00:10:13.212 --> 00:10:16.215
we are going to just basically on a task.

00:10:16.749 --> 00:10:18.117
Let us save and check.

00:10:18.117 --> 00:10:19.352
Yes. There you go.

00:10:19.352 --> 00:10:21.721
Our test passes are good.

00:10:21.721 --> 00:10:23.322
Most of our functionality
should also work.

00:10:23.322 --> 00:10:26.025
Let me try it.
I'm going to press enter now.

00:10:26.025 --> 00:10:28.561
It works.
Enter on empty task doesn't work.

00:10:28.561 --> 00:10:31.998
Maybe this way of having a inline
function is is generally not a good idea.

00:10:32.198 --> 00:10:35.101
So let us abstract that out
into its own function.

00:10:35.101 --> 00:10:37.570
So I'm going to
call this on input key down.

00:10:40.406 --> 00:10:43.409
And I will not I
can also show you how it works over here.

00:10:43.643 --> 00:10:45.778
So I'm going to just put up

00:10:45.778 --> 00:10:48.047
this part here.

00:10:48.047 --> 00:10:51.050
Maybe we can enter the curly braces.

00:10:51.751 --> 00:10:54.186
Now what is E over here. Right.

00:10:54.186 --> 00:10:57.857
So E is
basically a keyboard event from react.

00:10:58.624 --> 00:11:01.727
But you can ideally figure out
what is the exact type

00:11:01.727 --> 00:11:02.595
you have to give away.

00:11:02.595 --> 00:11:03.796
I know this from experience.

00:11:03.796 --> 00:11:06.799
So it's react dot keyboard event.

00:11:06.966 --> 00:11:09.735
And what type of event element it is.

00:11:09.735 --> 00:11:12.104
It's an input element.

00:11:12.104 --> 00:11:13.773
And I'm going to just pass this over here.

00:11:13.773 --> 00:11:16.776
Now let's save and verify
that our test still passes.

00:11:17.343 --> 00:11:18.210
Great.

00:11:18.210 --> 00:11:20.012
So this way with a slight refactoring.

00:11:20.012 --> 00:11:24.016
And since we had a passing test earlier,
we know that nothing broke.

00:11:24.250 --> 00:11:26.819
So this is again power of having tests.

00:11:26.819 --> 00:11:29.221
So you could see
how test development is helping us.

00:11:29.221 --> 00:11:31.524
But you will see the actual help
in the next section

00:11:31.524 --> 00:11:34.527
which we are going to do now,
which is a refactoring.

00:11:34.660 --> 00:11:37.129
Our code is kind of clumsy,
so we're going to clean up

00:11:37.129 --> 00:11:41.133
a lot of things, and we'll see how having
those those tests will help verify

00:11:41.133 --> 00:11:44.970
that our refactoring was
did not lose out on any functionality.

00:11:45.304 --> 00:11:47.306
Great.
We are now in the refactoring section.

00:11:47.306 --> 00:11:50.476
Refactoring is important irrespective
of whether you have tests or not.

00:11:50.676 --> 00:11:51.777
It will always.

00:11:51.777 --> 00:11:54.613
You should always find ways
to improve the design of your code,

00:11:54.613 --> 00:11:56.048
make it more readable.

00:11:56.048 --> 00:11:57.950
Maybe clear out
some of the technical debt.

00:11:57.950 --> 00:12:00.820
In fact, the first few lines of code
you write are usually not the best,

00:12:00.820 --> 00:12:03.823
and it's best to refactor
once you know there is a better approach.

00:12:04.023 --> 00:12:06.292
Now, of course,
the topic of refactoring is huge.

00:12:06.292 --> 00:12:07.827
There entire books written on it.

00:12:07.827 --> 00:12:09.895
We just go with the bare minimum here.

00:12:09.895 --> 00:12:11.363
So I would always say lookout

00:12:11.363 --> 00:12:15.134
for good blog articles to improve
on testing and refactoring in general.

00:12:15.334 --> 00:12:19.538
If you look at our current app
dot txt file, there's a lot of code around

00:12:20.306 --> 00:12:21.540
53 lines of code.

00:12:21.540 --> 00:12:24.477
Not bad,
but we could drastically bring this down.

00:12:24.477 --> 00:12:27.680
Right away I know a couple of things
I would move away, which is the types.

00:12:27.880 --> 00:12:32.017
We can have a separate file or folder
where we store these types right.

00:12:32.384 --> 00:12:33.219
So I'm going to create a

00:12:34.620 --> 00:12:35.654
type dot.

00:12:35.654 --> 00:12:37.823
TXT file

00:12:37.823 --> 00:12:40.826
and move my types over there.

00:12:40.893 --> 00:12:42.962
And I'm going to export the task type.

00:12:42.962 --> 00:12:45.931
Since I'm using it in my app.

00:12:46.899 --> 00:12:49.902
We have already used it by around
nine lines or something.

00:12:49.969 --> 00:12:55.407
Now maybe we could also extract the input
and the label into its own component.

00:12:55.975 --> 00:12:59.178
You could call it
something like task input component.

00:12:59.645 --> 00:13:02.648
So I'm going to create a task input file.

00:13:04.049 --> 00:13:07.052
And basically move my label and input

00:13:07.820 --> 00:13:08.754
into that component.

00:13:08.754 --> 00:13:11.757
So it's going to be our export default

00:13:11.957 --> 00:13:14.960
function task import

00:13:15.427 --> 00:13:16.295
and return.

00:13:16.295 --> 00:13:19.165
I'm going to use a fragment
since it has a label and input.

00:13:19.165 --> 00:13:22.668
We need a couple of props to be pass
from the parent which is the app.

00:13:22.935 --> 00:13:23.636
Right.

00:13:23.636 --> 00:13:26.505
So let us define this post.

00:13:26.505 --> 00:13:29.508
So I'm going to call this task import
props.

00:13:29.508 --> 00:13:30.176
What are we taking.

00:13:30.176 --> 00:13:33.112
We are taking a task name which is string.

00:13:33.112 --> 00:13:37.917
Then there's a set task name
which takes a task name as a string.

00:13:37.950 --> 00:13:39.618
And it's going to be a void.

00:13:39.618 --> 00:13:41.287
Next up we have on input zero.

00:13:42.621 --> 00:13:44.056
And this we know it's a

00:13:44.056 --> 00:13:47.059
react dot keyboard event.

00:13:47.493 --> 00:13:49.628
And this is an input element.

00:13:49.628 --> 00:13:54.033
And this will also return a void return
nothing which means return y.

00:13:54.400 --> 00:13:58.604
Now let us tell our component
to use these types these props

00:13:59.572 --> 00:14:01.874
these types for props.

00:14:01.874 --> 00:14:02.975
We have a task name.

00:14:02.975 --> 00:14:06.946
We have a set task name
and an input key to create a task.

00:14:06.946 --> 00:14:07.713
Input is happy.

00:14:07.713 --> 00:14:10.683
Let us use this
task input component in our app.

00:14:13.352 --> 00:14:14.019
Great!

00:14:14.019 --> 00:14:17.022
Let us pass the required props,
which is the task name.

00:14:18.691 --> 00:14:21.694
Next up is the set task name.

00:14:23.462 --> 00:14:26.432
And also our input key down.

00:14:27.032 --> 00:14:29.034
Now you see that
this is not a huge improvement.

00:14:29.034 --> 00:14:31.270
Our lines have not reduced,
we just abstracted.

00:14:31.270 --> 00:14:34.373
But it pretty much added
the same amount of lines again.

00:14:34.506 --> 00:14:39.511
But maybe we could also move our button
into the task input itself.

00:14:39.879 --> 00:14:41.313
So let us try to do that.

00:14:41.313 --> 00:14:43.916
So I'm going to
move my button also into my

00:14:45.084 --> 00:14:46.652
task input

00:14:46.652 --> 00:14:50.456
and also pass the on task as a prop.

00:14:51.957 --> 00:14:53.425
So let me also define this.

00:14:53.425 --> 00:14:55.928
This pretty much takes nothing
and it just calls it.

00:14:55.928 --> 00:15:00.165
So it's going to be empty items
and y on a task.

00:15:00.532 --> 00:15:02.701
But so on.

00:15:02.701 --> 00:15:05.704
We can also pass
the on task function over here.

00:15:06.105 --> 00:15:06.672
Great.

00:15:06.672 --> 00:15:09.975
Maybe
we reduced by a two lines or something.

00:15:10.242 --> 00:15:13.145
Maybe we could also now refactor
our task input name.

00:15:13.145 --> 00:15:14.580
We're also worrying about file names.

00:15:14.580 --> 00:15:17.583
Right now task input
just sounds like an input.

00:15:17.816 --> 00:15:20.819
And. But right now
we also have a button over there.

00:15:21.086 --> 00:15:26.558
So it's a good idea to call this something
as maybe add task or in task.

00:15:26.558 --> 00:15:29.962
Input with button at task
seems reasonable to me

00:15:30.529 --> 00:15:34.633
and I'm going
also rename the actual function export.

00:15:38.404 --> 00:15:39.872
Right.

00:15:39.872 --> 00:15:42.875
And I'm gonna also call this as a task

00:15:43.242 --> 00:15:46.178
and clean up my inputs.

00:15:46.178 --> 00:15:48.847
Now you see this on input.

00:15:48.847 --> 00:15:51.183
This is not used anywhere else.

00:15:51.183 --> 00:15:54.153
And maybe we can move this into our attach
component.

00:15:56.655 --> 00:15:59.658
And avoid passing
that prop down from the parent.

00:16:00.092 --> 00:16:02.461
So I'm going to clean up that input.

00:16:02.461 --> 00:16:06.165
So now you see that
our app file has produced quite a bit.

00:16:06.165 --> 00:16:08.534
Now it's around 40 lines. Now.

00:16:08.534 --> 00:16:11.537
And we also reduced the amount of props
we pass.

00:16:11.537 --> 00:16:13.939
I want to show a little performance
problem.

00:16:13.939 --> 00:16:17.242
It's not a huge problem but I'm going to
show unnecessary renders over here.

00:16:17.609 --> 00:16:20.612
Let us put a simple console.log
at the top.

00:16:21.480 --> 00:16:24.249
I'm going to just call it console.log.

00:16:24.249 --> 00:16:26.251
rendered

00:16:26.251 --> 00:16:28.020
right and open my console.

00:16:28.020 --> 00:16:31.023
Now whenever I type in my input,
you would see that.

00:16:31.156 --> 00:16:33.826
You would see that the app has rendered.

00:16:33.826 --> 00:16:34.893
This seems unnecessary.

00:16:35.861 --> 00:16:37.363
Why does the whole app

00:16:37.363 --> 00:16:40.833
app have to render
when I'm typing into the input file?

00:16:41.066 --> 00:16:44.303
This has to do something
with where our state is located.

00:16:44.403 --> 00:16:48.474
You see our task name,
which is which the input manipulates

00:16:48.741 --> 00:16:52.945
is located at the app level,
and ideally we don't have to use it here.

00:16:53.545 --> 00:16:56.682
We could bring the state down
into our At task component.

00:16:56.782 --> 00:16:59.785
Let us do that.

00:17:01.420 --> 00:17:02.988
And this way I don't have to pass my task

00:17:02.988 --> 00:17:05.991
name and set task name to the component.

00:17:07.092 --> 00:17:07.960
Right.

00:17:07.960 --> 00:17:09.361
And I'm going to import react.

00:17:09.361 --> 00:17:12.131
Since we're using react over here.

00:17:12.131 --> 00:17:13.832
And I'm going to clean up this.

00:17:13.832 --> 00:17:16.802
But our on our task
is still in the parent.

00:17:17.269 --> 00:17:19.738
Right. And it still needs to task me.

00:17:19.738 --> 00:17:22.007
So what we could do is we could
you could pass it as an argument.

00:17:24.643 --> 00:17:27.613
So this is going to be a string.

00:17:27.613 --> 00:17:30.549
And you see that there's a set task
which we are doing it.

00:17:30.549 --> 00:17:33.819
So right away let's
but now let's remove it and you'll see

00:17:33.819 --> 00:17:38.257
how our test will help us capture
this later, our missing functionality.

00:17:38.457 --> 00:17:40.325
And now we know there's a type mismatch.

00:17:40.325 --> 00:17:44.196
Our add task takes a parameter
which is task name.

00:17:45.831 --> 00:17:50.102
So now on at task
all we have to do is pass our task name.

00:17:50.436 --> 00:17:52.204
And here

00:17:52.204 --> 00:17:54.239
where we are and click off button two.

00:17:54.239 --> 00:17:57.242
We could pass our task name.

00:17:57.509 --> 00:17:57.876
Great.

00:17:57.876 --> 00:18:01.847
Now if you save, there would still be one
particular task which is failing.

00:18:02.014 --> 00:18:04.116
We are not clearing our input field.

00:18:04.116 --> 00:18:06.685
And this happened because
I was refactoring quite a bit of code.

00:18:06.685 --> 00:18:07.986
You could also be doing
something like that

00:18:07.986 --> 00:18:10.155
and miss out
on that particular requirement.

00:18:10.155 --> 00:18:13.158
So having tests will help
catch such bugs, right?

00:18:13.325 --> 00:18:14.760
So let us bring that functionality down.

00:18:14.760 --> 00:18:16.395
And I don't like this

00:18:16.395 --> 00:18:21.033
two different pieces of functions
doing the same stuff like adding task.

00:18:21.033 --> 00:18:23.068
So I'm going to abstract that out.

00:18:23.068 --> 00:18:26.271
I'm going to have something like punched
handle at task, which will handle

00:18:26.672 --> 00:18:29.374
the addition of task to the list.

00:18:29.374 --> 00:18:31.944
And I'm going to basically

00:18:31.944 --> 00:18:36.448
bring all the logic which was doing my
which was streaming my task and adding it,

00:18:37.516 --> 00:18:40.519
and here I could just pass as task.

00:18:42.321 --> 00:18:44.356
And I'm going to bring this down

00:18:44.356 --> 00:18:47.359
to my handle at task,

00:18:47.626 --> 00:18:49.728
and I'm going to still call the on a task.

00:18:49.728 --> 00:18:52.731
And this time I'm going to pass
in the dream task name directly

00:18:53.132 --> 00:18:56.101
and set my task name back to empty string.

00:18:56.401 --> 00:18:59.238
So here
where I was doing a on input key down,

00:18:59.238 --> 00:19:02.241
I'm going to just do any letters.

00:19:03.075 --> 00:19:05.911
And at the bottom
to where I was clicking on the button,

00:19:05.911 --> 00:19:08.213
I'm going to just call this function right
now. Great.

00:19:08.213 --> 00:19:10.249
Now our task should pass.

00:19:10.249 --> 00:19:11.617
And let us also save the app file.

00:19:11.617 --> 00:19:12.951
So we're not using on anything.

00:19:12.951 --> 00:19:15.654
Now if you try to type in the input field

00:19:15.654 --> 00:19:18.056
you would see that
our app doesn't render anymore.

00:19:18.056 --> 00:19:21.827
So this is a good way of solving
certain performance problems

00:19:21.827 --> 00:19:24.963
without using fancy stuff
like use callback or use memos.

00:19:24.963 --> 00:19:27.900
In fact,
those things might not will not help here.

00:19:27.900 --> 00:19:30.969
Just bringing down
our state helped us greatly.

00:19:30.969 --> 00:19:34.540
Okay, now I'm going to remove this console
and I'm going to show one more

00:19:34.540 --> 00:19:35.474
improvement which we can do.

00:19:36.942 --> 00:19:38.977
This is again part of refactoring.

00:19:38.977 --> 00:19:42.147
I don't like this logic
where I'm handling the input key down

00:19:42.281 --> 00:19:46.652
when the browser gives us
this functionality by default and all.

00:19:46.685 --> 00:19:49.688
In order to enable that,
all we have to do is have a form element

00:19:51.290 --> 00:19:54.293
and we could remove this key down

00:19:55.027 --> 00:19:55.861
logic.

00:19:55.861 --> 00:20:00.566
And I can also remove this
onclick on the button and let it be.

00:20:00.566 --> 00:20:03.569
An add button would submit a event.

00:20:03.602 --> 00:20:06.605
So on submit.

00:20:07.306 --> 00:20:08.974
It's going to be handled at task.

00:20:08.974 --> 00:20:12.077
Now our form and at task will take
the event.

00:20:14.146 --> 00:20:15.280
Will take a parameter event

00:20:15.280 --> 00:20:18.283
which is the react dot form event.

00:20:19.218 --> 00:20:22.221
And we know that it has HTML form element.

00:20:23.722 --> 00:20:24.923
And one thing which we need to do

00:20:24.923 --> 00:20:27.993
is prevent
the event e dot prevent default.

00:20:28.760 --> 00:20:32.130
So usually forms when you click on submit
they refresh the page.

00:20:32.130 --> 00:20:33.165
We want to avoid that.

00:20:33.165 --> 00:20:36.468
That's the reason we are doing it
E dot prevent dot default.

00:20:36.668 --> 00:20:38.403
So E is a short form for event

00:20:39.504 --> 00:20:39.738
right?

00:20:39.738 --> 00:20:41.039
It's a form event.

00:20:41.039 --> 00:20:43.508
And now if we save
our test are still passing

00:20:43.508 --> 00:20:46.478
and we still have a functionality of

00:20:46.478 --> 00:20:50.282
adding a task and place of enter
an empty task won't work.

00:20:50.449 --> 00:20:55.787
Now, if you look at our code, the app dot
TSX is quite small, around 30 lines.

00:20:56.221 --> 00:21:00.492
It is simple code
to read better than previous code or act

00:21:00.659 --> 00:21:04.196
component is handling
everything related to adding a task.

00:21:04.296 --> 00:21:07.299
This was a very simple
example of refactoring.

00:21:07.332 --> 00:21:11.436
Imagine doing this on a larger code base
and improving it drastically.

00:21:11.436 --> 00:21:15.774
We also saw how we can we were able to
solve a small performance problem

00:21:15.907 --> 00:21:16.975
even though it is small.

00:21:16.975 --> 00:21:19.978
In this case,
I use that particular logic everywhere

00:21:20.479 --> 00:21:23.248
and hit greatly helped simplify things.

00:21:23.248 --> 00:21:25.117
Come on readability perspective also.

00:21:25.117 --> 00:21:27.753
Now let us save our code and we'll call it

00:21:30.022 --> 00:21:33.025
to send refactor.

00:21:34.426 --> 00:21:35.394
See you in the next section.

